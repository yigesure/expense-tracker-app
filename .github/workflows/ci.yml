name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  # 代码质量检查
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: flutter analyze --fatal-infos

      - name: Run dart_code_metrics
        run: flutter pub run dart_code_metrics:metrics analyze lib

  # 单元测试和Widget测试
  test:
    name: Unit & Widget Tests
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Android构建
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Get dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Build App Bundle
        run: flutter build appbundle --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: Upload App Bundle artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-aab
          path: build/app/outputs/bundle/release/app-release.aab

  # iOS构建（仅在macOS上运行）
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build iOS (no codesign)
        run: flutter build ios --release --no-codesign

      - name: Create IPA
        run: |
          cd build/ios/iphoneos
          mkdir Payload
          cp -r Runner.app Payload/
          zip -r app-release.ipa Payload/

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-ipa
          path: build/ios/iphoneos/app-release.ipa

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run dependency audit
        run: flutter pub deps --json | jq '.packages[] | select(.kind == "direct") | .name' | xargs -I {} echo "Checking {}"

      - name: Check for known vulnerabilities
        run: |
          # 检查pubspec.lock中的已知漏洞
          if [ -f pubspec.lock ]; then
            echo "Checking for known vulnerabilities in dependencies..."
            # 这里可以集成更多安全扫描工具
          fi

  # 性能测试
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run performance tests
        run: |
          # 运行性能测试
          flutter test test/performance/
          
      - name: Analyze bundle size
        run: |
          flutter build apk --analyze-size --target-platform android-arm64
          echo "Bundle size analysis completed"

  # 发布到GitHub Releases
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: github.event_name == 'release'
    steps:
      - name: Download Android APK
        uses: actions/download-artifact@v3
        with:
          name: android-apk

      - name: Download Android AAB
        uses: actions/download-artifact@v3
        with:
          name: android-aab

      - name: Download iOS IPA
        uses: actions/download-artifact@v3
        with:
          name: ios-ipa

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            app-release.apk
            app-release.aab
            app-release.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 通知
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [analyze, test, build-android, build-ios]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.analyze.result == 'success' && needs.test.result == 'success' }}
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "- Code analysis: PASSED"
          echo "- Tests: PASSED"
          echo "- Builds: COMPLETED"

      - name: Notify on failure
        if: ${{ needs.analyze.result == 'failure' || needs.test.result == 'failure' }}
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "- Code analysis: ${{ needs.analyze.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          exit 1